package main

import (
	"fmt"
	"sync"
)

type Semaphore struct {
	PermitCount int
	signal      chan struct{}
}

func (s *Semaphore) Release() {
	s.signal <- struct{}{}
}

func (s *Semaphore) Acquire() {
	<-s.signal
}

func main() {
	var wg sync.WaitGroup

	semaphore := Semaphore{
		PermitCount: 3,
		signal:      make(chan struct{}, 3),
	}

	for i := 0; i < 3; i++ {
		semaphore.signal <- struct{}{}
	}

	for i := 0; i < 3; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			defer semaphore.Release()
			semaphore.Acquire()
			fmt.Printf("Горутина %d: Привет, мир!\n", i)
		}(i)
	}

	wg.Wait()
}