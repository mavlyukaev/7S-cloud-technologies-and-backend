package main

import "fmt"

type Mutex struct {
	Count int
	signal chan struct{} // канал для синхронизации
}

func (m *Mutex) Unlock() {
	// "Разблокируем" мьютекс, отправив в канал сообщение
	m.signal <- struct{}{}
}

func (m *Mutex) Wait() {
	// Ожидаем, пока будет отправлено сообщение в канал
	<-m.signal
}

func main() {
	m := Mutex{
		Count: 3,
		signal: make(chan struct{}, 3), // канал с буфером для 3 разрешений
	}

	// Инициализация канала с тремя "разрешениями"
	for i := 0; i < m.Count; i++ {
		m.signal <- struct{}{}
	}

	// Запуск 3 горутин
	for i := 0; i < 3; i++ {
		go func() {
			defer m.Unlock() // освобождаем "разрешение" по завершению работы горутины
			m.Wait()          // ждем, пока не получим "разрешение"
			fmt.Println("Hello, 世界")
		}()
	}

	// Ожидаем, пока все горутины завершат свою работу
	// Никакого явного ожидания здесь нет, так как каждая горутина заблокируется на m.Wait() и завершится по порядку.
	select {}
}